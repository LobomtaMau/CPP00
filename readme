Purpose of the Project:

* Recreate the Account.cpp File: You are given the header file (Account.hpp) and a log file to recreate the missing source file (Account.cpp). This involves implementing the Account class based on the provided header file and matching the expected output from the tests as per the log file.
* Understand Class Implementation: Gain a deeper understanding of how to implement a class in C++ by examining the header file and using it as a reference to create the source file.
* Practice C++ Concepts: Apply various C++ concepts such as classes, member functions, constructors, destructors, static members, initialization lists, namespaces, and file I/O in a practical project.
* Testing and Validation: Ensure that your implementation passes the provided tests and produces the expected output as per the log file, demonstrating correctness and functionality.
* Learn from Logs: Utilize the information from the log file to understand the expected behavior and output of the Account class, and use it as a guide during implementation.

What to Learn About:

* Classes and Objects: Understand the basics of defining and using classes, including member variables and member functions.

* Header and Source Files: Learn the importance of separating class declarations (Account.hpp) from class implementations (Account.cpp).

* Constructors and Destructors: Familiarize yourself with constructors (especially default and parameterized constructors) and destructors, and understand their role in object initialization and cleanup.

* Member Functions: Understand how to define and use member functions within a class to encapsulate behavior and operations related to the class.

* Static Member Variables and Functions: Learn about static member variables and functions, which are shared across all instances of the class.

* Initialization Lists: Understand the benefits of using initialization lists in constructors to initialize member variables.

* Namespaces: Learn how to use namespaces to organize code and prevent naming conflicts.

* File I/O: Understand how to read from and write to files using <fstream> for logging purposes.

* Const Member Functions: Learn about const member functions, which promise not to modify member variables of the class.



_displayTimestamp():
    * This is a private static member function of the Account class.
    * It displays the current timestamp in the format [YYYY-MM-DD_HH:MM:SS].

displayStatus() const:
    * This is a public member function of the Account class.
    * It displays the account status including ID, amount, and number of withdrawals.
    * The const qualifier indicates that this member function does not modify any member variables of the Account object.

displayAccountsInfos():
    * This is a public static member function of the Account class.
    * It displays the total number of accounts, total amount, total number of deposits, and total number of withdrawals.
    * It uses private static member variables _nbAccounts, _totalAmount, _totalNbDeposits, and _totalNbWithdrawals to retrieve and display the information.